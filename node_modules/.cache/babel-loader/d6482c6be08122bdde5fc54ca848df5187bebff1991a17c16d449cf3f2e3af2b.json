{"ast":null,"code":"var _jsxFileName = \"/home/dom/SpringBoard/compdes/react-lights-out/react-lights-out/src/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board(_ref) {\n  _s();\n  let {\n    nrows,\n    ncols,\n    chanceLightStartsOn\n  } = _ref;\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    const chance = () => {\n      let val = Math.floor(Math.random() * 100);\n      return val > chanceLightStartsOn * 100 ? false : true;\n    };\n    let initialBoard = [];\n    for (let y = 0; y < ncols; y++) {\n      let row = [];\n      for (let x = 0; x < nrows; x++) {\n        row.push(chance());\n      }\n      initialBoard.push(row);\n    }\n    // TODO: create array-of-arrays of true/false values\n    console.log(initialBoard);\n    return initialBoard;\n  }\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n  }\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n      const boardCopy = oldBoard.map(row => [...row]);\n\n      // TODO: Make a (deep) copy of the oldBoard\n      flipCell(y, x, boardCopy);\n      flipCell(y, x - 1, boardCopy);\n      flipCell(y, x + 1, boardCopy);\n      flipCell(y - 1, x, boardCopy);\n      flipCell(y + 1, x, boardCopy);\n      // TODO: in the copy, flip this cell and the cells around it\n      return boardCopy;\n      // TODO: return the copy\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  // TODO\n  board.map(c => c.map(cc => console.log(cc)));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"GAME\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: board.map((row, idx) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.map((cell, idxx) => /*#__PURE__*/_jsxDEV(Cell, {\n            flipCellsAroundMe: flipCellsAround,\n            isLit: cell,\n            id: [idx, idxx]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 11\n          }, this))\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 9\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 4\n  }, this);\n  // make table board\n\n  // TODO\n}\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","useEffect","Cell","jsxDEV","_jsxDEV","Board","_ref","_s","nrows","ncols","chanceLightStartsOn","board","setBoard","createBoard","chance","val","Math","floor","random","initialBoard","y","row","x","push","console","log","hasWon","flipCellsAround","coord","oldBoard","split","map","Number","flipCell","boardCopy","c","cc","children","fileName","_jsxFileName","lineNumber","columnNumber","idx","cell","idxx","flipCellsAroundMe","isLit","id","_c","$RefreshReg$"],"sources":["/home/dom/SpringBoard/compdes/react-lights-out/react-lights-out/src/Board.js"],"sourcesContent":["import React, { useState,useEffect } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows, ncols, chanceLightStartsOn }) {\n  const [board, setBoard] = useState(createBoard());\n\n  \n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    const chance = () => {\n      let val = Math.floor(Math.random() * 100)\n      return val > (chanceLightStartsOn * 100) ? false : true\n    }\n    let initialBoard = [];\n    for(let y = 0; y < ncols; y++){\n      let row = [];\n      for(let x = 0; x < nrows; x++){\n        row.push(chance())\n      }\n      initialBoard.push(row)\n    }\n    // TODO: create array-of-arrays of true/false values\n    console.log(initialBoard)\n    return initialBoard;\n  }\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      const boardCopy = oldBoard.map(row => [...row]);\n\n      // TODO: Make a (deep) copy of the oldBoard\n      flipCell(y,x,boardCopy)\n      flipCell(y,x-1,boardCopy)\n      flipCell(y,x+1,boardCopy)\n      flipCell(y-1,x,boardCopy)\n      flipCell(y+1,x,boardCopy)\n      // TODO: in the copy, flip this cell and the cells around it\n      return boardCopy\n      // TODO: return the copy\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  // TODO\n  board.map(c => c.map(cc => console.log(cc)))\n  return (\n   <div>\n    <h1>GAME</h1>\n    <table>\n      <tbody>\n        {board.map((row,idx) => (\n        <tr key={idx}>{row.map((cell,idxx) => (\n          <Cell flipCellsAroundMe={flipCellsAround} isLit={cell} id={[idx,idxx]}></Cell>\n        ))}\n        </tr>\n        ))}\n      </tbody>\n       \n    </table>\n   \n   </div>\n  )\n  // make table board\n\n  // TODO\n}\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}