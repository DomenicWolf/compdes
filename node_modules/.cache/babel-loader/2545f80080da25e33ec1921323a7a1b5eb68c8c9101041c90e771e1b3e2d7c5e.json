{"ast":null,"code":"var _jsxFileName = \"/home/dom/SpringBoard/compdes/react-lights-out/react-lights-out/src/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board(_ref) {\n  _s();\n  let {\n    nrows,\n    ncols,\n    chanceLightStartsOn\n  } = _ref;\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    const chance = () => {\n      let val = Math.floor(Math.random() * 100);\n      return val > chanceLightStartsOn * 100 ? false : true;\n    };\n    let initialBoard = [];\n    for (let y = 0; y < ncols; y++) {\n      let row = [];\n      for (let x = 0; x < nrows; x++) {\n        row.push(chance());\n      }\n      initialBoard.push(row);\n    }\n    // TODO: create array-of-arrays of true/false values\n\n    return initialBoard;\n  }\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    let test;\n    for (let i = 0; i < board.length; i++) {\n      test = board[i].every(j => j === false);\n    }\n    if (test === true) {\n      alert('YOU HAVE WON SOMEHOW!');\n      console.log(board);\n      return false;\n    }\n  }\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n      const boardCopy = oldBoard.map(row => [...row]);\n\n      // TODO: Make a (deep) copy of the oldBoard\n      flipCell(y, x, boardCopy);\n      flipCell(y, x - 1, boardCopy);\n      flipCell(y, x + 1, boardCopy);\n      flipCell(y - 1, x, boardCopy);\n      flipCell(y + 1, x, boardCopy);\n      // TODO: in the copy, flip this cell and the cells around it\n      return boardCopy;\n      // TODO: return the copy\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  // TODO\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"GAME\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }, this), hasWon() ? '' : /*#__PURE__*/_jsxDEV(\"table\", {\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: board.map((row, idx) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.map((cell, idxx) => /*#__PURE__*/_jsxDEV(Cell, {\n            flipCellsAroundMe: flipCellsAround,\n            isLit: cell,\n            id: [idx, idxx]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 11\n          }, this))\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 9\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 4\n  }, this);\n  // make table board\n\n  // TODO\n}\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","useEffect","Cell","jsxDEV","_jsxDEV","Board","_ref","_s","nrows","ncols","chanceLightStartsOn","board","setBoard","createBoard","chance","val","Math","floor","random","initialBoard","y","row","x","push","hasWon","test","i","length","every","j","alert","console","log","flipCellsAround","coord","oldBoard","split","map","Number","flipCell","boardCopy","children","fileName","_jsxFileName","lineNumber","columnNumber","idx","cell","idxx","flipCellsAroundMe","isLit","id","_c","$RefreshReg$"],"sources":["/home/dom/SpringBoard/compdes/react-lights-out/react-lights-out/src/Board.js"],"sourcesContent":["import React, { useState,useEffect } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows, ncols, chanceLightStartsOn }) {\n  const [board, setBoard] = useState(createBoard());\n\n  \n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    const chance = () => {\n      let val = Math.floor(Math.random() * 100)\n      return val > (chanceLightStartsOn * 100) ? false : true\n    }\n    let initialBoard = [];\n    for(let y = 0; y < ncols; y++){\n      let row = [];\n      for(let x = 0; x < nrows; x++){\n        row.push(chance())\n      }\n      initialBoard.push(row)\n    }\n    // TODO: create array-of-arrays of true/false values\n    \n    return initialBoard;\n  }\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    let test;\n    for(let i = 0; i < board.length; i++) {\n      \n      test = board[i].every(j => j === false)\n    }\n    if (test === true){\n      alert('YOU HAVE WON SOMEHOW!')\n      console.log(board)\n      return false\n    }\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      const boardCopy = oldBoard.map(row => [...row]);\n\n      // TODO: Make a (deep) copy of the oldBoard\n      flipCell(y,x,boardCopy)\n      flipCell(y,x-1,boardCopy)\n      flipCell(y,x+1,boardCopy)\n      flipCell(y-1,x,boardCopy)\n      flipCell(y+1,x,boardCopy)\n      // TODO: in the copy, flip this cell and the cells around it\n      return boardCopy\n      // TODO: return the copy\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  // TODO\n \n  return (\n   <div>\n    \n    <h1>GAME</h1>\n    {hasWon() ? '' : \n    <table>\n      <tbody>\n        {board.map((row,idx) => (\n        <tr key={idx}>{row.map((cell,idxx) => (\n          <Cell flipCellsAroundMe={flipCellsAround} isLit={cell} id={[idx,idxx]}></Cell>\n        ))}\n        </tr>\n        ))}\n      </tbody>\n       \n    </table>\n   }\n   </div>\n  )\n  // make table board\n\n  // TODO\n}\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}