{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board(_ref) {\n  _s();\n  let {\n    nrows,\n    ncols,\n    chanceLightStartsOn\n  } = _ref;\n  const [board, setBoard] = useState([]);\n  useEffect(() => {\n    setBoard(createBoard());\n  }, []);\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    const chance = () => {\n      let val = Math.floor(Math.random() * 100);\n      return val > chanceLightStartsOn * 100 ? false : true;\n    };\n    let initialBoard = [];\n    for (let y = 0; y < nrows; y++) {\n      let row = [];\n      row.push(chance());\n      for (let x = 0; x < ncols - 1; x++) {\n        row.push(chance());\n      }\n      initialBoard.push(row);\n    }\n    // TODO: create array-of-arrays of true/false values\n    console.log(initialBoard);\n    return initialBoard;\n  }\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n  }\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n\n      // TODO: in the copy, flip this cell and the cells around it\n\n      // TODO: return the copy\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  // TODO\n\n  // make table board\n\n  // TODO\n}\n_s(Board, \"jMNr9OUCnGXRnWCrgJjYZl+B82M=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","useEffect","Cell","Board","_ref","_s","nrows","ncols","chanceLightStartsOn","board","setBoard","createBoard","chance","val","Math","floor","random","initialBoard","y","row","push","x","console","log","hasWon","flipCellsAround","coord","oldBoard","split","map","Number","flipCell","boardCopy","_c","$RefreshReg$"],"sources":["/home/dom/SpringBoard/compdes/react-lights-out/react-lights-out/src/Board.js"],"sourcesContent":["import React, { useState,useEffect } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows, ncols, chanceLightStartsOn }) {\n  const [board, setBoard] = useState([]);\n\n  useEffect(() => {\n    setBoard(createBoard());\n  }, []);\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    const chance = () => {\n      let val = Math.floor(Math.random() * 100)\n      return val > (chanceLightStartsOn * 100) ? false : true\n    }\n    let initialBoard = [];\n    for(let y = 0; y < nrows; y++){\n      let row = [];\n      row.push(chance())\n      for(let x = 0; x < ncols - 1; x++){\n        row.push(chance())\n      }\n      initialBoard.push(row)\n    }\n    // TODO: create array-of-arrays of true/false values\n    console.log(initialBoard)\n    return initialBoard;\n  }\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n\n      // TODO: in the copy, flip this cell and the cells around it\n\n      // TODO: return the copy\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  // TODO\n\n  // make table board\n\n  // TODO\n}\n\nexport default Board;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAACC,SAAS,QAAQ,OAAO;AACjD,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAO,aAAa;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,KAAKA,CAAAC,IAAA,EAAwC;EAAAC,EAAA;EAAA,IAAvC;IAAEC,KAAK;IAAEC,KAAK;IAAEC;EAAoB,CAAC,GAAAJ,IAAA;EAClD,MAAM,CAACK,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACdS,QAAQ,CAACC,WAAW,CAAC,CAAC,CAAC;EACzB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,SAASA,WAAWA,CAAA,EAAG;IACrB,MAAMC,MAAM,GAAGA,CAAA,KAAM;MACnB,IAAIC,GAAG,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC;MACzC,OAAOH,GAAG,GAAIL,mBAAmB,GAAG,GAAI,GAAG,KAAK,GAAG,IAAI;IACzD,CAAC;IACD,IAAIS,YAAY,GAAG,EAAE;IACrB,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGZ,KAAK,EAAEY,CAAC,EAAE,EAAC;MAC5B,IAAIC,GAAG,GAAG,EAAE;MACZA,GAAG,CAACC,IAAI,CAACR,MAAM,CAAC,CAAC,CAAC;MAClB,KAAI,IAAIS,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGd,KAAK,GAAG,CAAC,EAAEc,CAAC,EAAE,EAAC;QAChCF,GAAG,CAACC,IAAI,CAACR,MAAM,CAAC,CAAC,CAAC;MACpB;MACAK,YAAY,CAACG,IAAI,CAACD,GAAG,CAAC;IACxB;IACA;IACAG,OAAO,CAACC,GAAG,CAACN,YAAY,CAAC;IACzB,OAAOA,YAAY;EACrB;EAEA,SAASO,MAAMA,CAAA,EAAG;IAChB;EAAA;EAGF,SAASC,eAAeA,CAACC,KAAK,EAAE;IAC9BhB,QAAQ,CAACiB,QAAQ,IAAI;MACnB,MAAM,CAACT,CAAC,EAAEG,CAAC,CAAC,GAAGK,KAAK,CAACE,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,MAAM,CAAC;MAE3C,MAAMC,QAAQ,GAAGA,CAACb,CAAC,EAAEG,CAAC,EAAEW,SAAS,KAAK;QACpC;;QAEA,IAAIX,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAGd,KAAK,IAAIW,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAGZ,KAAK,EAAE;UAC9C0B,SAAS,CAACd,CAAC,CAAC,CAACG,CAAC,CAAC,GAAG,CAACW,SAAS,CAACd,CAAC,CAAC,CAACG,CAAC,CAAC;QACpC;MACF,CAAC;;MAED;;MAEA;;MAEA;IACF,CAAC,CAAC;EACJ;;EAEA;;EAEA;;EAEA;;EAEA;AACF;AAAChB,EAAA,CA1DQF,KAAK;AAAA8B,EAAA,GAAL9B,KAAK;AA4Dd,eAAeA,KAAK;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}